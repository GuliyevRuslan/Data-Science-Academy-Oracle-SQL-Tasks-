select * from hr.employees;

--1.	Write an SQL query to print the first three characters of FIRST_NAME from the employees table.

select first_name,SUBSTR(first_name,1,3) from hr.employees;

--2.	Write a SQL query to find those employees who earn less than the employee of ID 182. 
--Return first name, last name and salary.

select first_name,last_name,salary from hr.employees where salary<2500 order by salary desc;

select  first_name,last_name,salary from employees 
where salary<(select salary from employees where employee_id=182) order by salary desc;

--3.	Write a SQL query to find full name (first and last name), job title, starting and ending 
--date of last jobs of employees who worked without a commission percentage.

select max(start_date),max(end_date),employee_id from job_history group by employee_id;
select e.first_name||' '||e.last_name,job_title
from employees e
left join ;



select emp.employee_id,first_name||' '|| last_name Full_name,j.job_title,jh.start_date,max(jh.end_date) from employees emp 
left join job_history jh on emp.employee_id=jh.employee_id
left join jobs j on jh.job_id=j.job_id
where emp.commission_pct is null group by j.employee_id ;


SELECT first_name||' '||last_name "full name",
       job.job_title,
       hist.*
FROM employees emp
JOIN
  (SELECT MAX(start_date) starting_date,
          MAX(end_date) ending_date,
          employee_id
   FROM job_history
   GROUP BY employee_id) hist ON emp.employee_id=hist.employee_id
JOIN jobs job ON job.job_id=emp.job_id
WHERE emp.commission_pct IS NULL;

--4.	Find the top 5 job titles with the highest average salary.

SELECT * FROM (select j.job_title,avg(e.salary),
row_number()
over(order by avg(e.salary) desc )row_number
from employees e
left join jobs j
on e.job_id = j.job_id
group by j.job_title)WHERE row_number <=5
;
select * 
from(select avg(e.salary),j.job_title,
row_number()
over (order by avg(e.salary)desc) row_number
from employees e
left join jobs j using(job_id)
group by j.job_title)
where row_number <= 5;
--5.	Write a SQL query to find a list of employees whose salary is more than 5000 or less than 2000.
--(write a query using UNION operator)

SELECT First_name,salary from employees where salary>5000 
union 
SELECT First_name,salary from employees where salary<2000; 


Select first_name || ' ' || last_name as Full_name, j.job_title,
jh.start_date, jh.end_date from hr.employees emp
left join hr.jobs j on emp.job_id=j.job_id
left join hr.job_history jh on j.job_id=jh.job_id
where commission_pct is NULL ;


--4.	Find the top 5 job titles with the highest average salary.

select avg(e.salary),j.job_title from employees e
left join jobs j
on e.job_id = j.job_id
group by job_title;

select j.job_title,avg(salary),
row_number()
over (partition by job_title order by avg(salary )desc) row_number
from employees e
left join jobs j
on e.job_id = j.job_id;

--6.	Create a matrix query to display the year of hire date, the employees count for
--that year based on departments 20, 50, 80, and 90, giving each column an appropriate heading. (20 points)

select extract (year from hire_Date) Year,
count(decode(department_id,20,employee_id)) "Department 20", 
count(decode(department_id,50,employee_id)) "Department 50",
count(decode(department_id,80,employee_id)) "Department 80",
count(decode(department_id,90,employee_id)) "Department 90"
from employees 
group by extract (year from hire_Date)
order by extract (year from  hire_date);

--7.	List the names and surnames of the employees for each  job title
--with department names by their salaries using dense_rank 

select first_name,last_name,j.job_title,dep.department_name,emp.salary ,
dense_rank()
over(partition by j.job_title order by emp.salary ) DENSE_RANK 
from jobS j
left join employees emp on j.job_id=emp.job_Id
left join departments dep on emp.department_id=dep.department_id 
ORDER BY DENSE_RANK, SALARY;












